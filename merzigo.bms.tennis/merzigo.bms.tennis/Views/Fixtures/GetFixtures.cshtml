@model List<merzigo.bms.tennis.Models.Fixtures>
@{
    ViewData["Title"] = "Tennis Fixtures";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">Tennis Fixtures</h2>
            
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Event Key</th>
                                <th scope="col">Date & Time</th>
                                <th scope="col">Players</th>
                                <th scope="col">Tournament</th>
                                <th scope="col">Round</th>
                                <th scope="col">Status</th>
                                <th scope="col">Result</th>
                                <th scope="col">Live</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var fixture in Model)
                            {
                                <tr>
                                    <td>
                                        <small class="text-muted">@fixture.EventKey</small>
                                    </td>
                                    <td>
                                        <strong>@fixture.EventDate</strong><br>
                                        <small class="text-muted">@fixture.EventTime</small>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(fixture.EventFirstPlayerLogo))
                                            {
                                                <img src="@fixture.EventFirstPlayerLogo" alt="@fixture.EventFirstPlayer" 
                                                     class="me-2" style="width: 20px; height: 20px; border-radius: 50%;">
                                            }
                                            <div>
                                                <strong>@fixture.EventFirstPlayer</strong><br>
                                                <small class="text-muted">vs</small><br>
                                                <strong>@fixture.EventSecondPlayer</strong>
                                                @if (!string.IsNullOrEmpty(fixture.EventSecondPlayerLogo))
                                                {
                                                    <img src="@fixture.EventSecondPlayerLogo" alt="@fixture.EventSecondPlayer" 
                                                         class="ms-2" style="width: 20px; height: 20px; border-radius: 50%;">
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <strong>@fixture.TournamentName</strong><br>
                                        <small class="text-muted">Season: @fixture.TournamentSeason</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@fixture.TournamentRound</span>
                                    </td>
                                    <td>
                                        @{
                                            var statusClass = fixture.EventStatus?.ToLower() switch
                                            {
                                                "finished" => "bg-success",
                                                "live" => "bg-danger",
                                                "upcoming" => "bg-warning",
                                                "postponed" => "bg-secondary",
                                                _ => "bg-light text-dark"
                                            };
                                        }
                                        <span class="badge @statusClass">@fixture.EventStatus</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(fixture.EventFinalResult))
                                        {
                                            <span class="fw-bold">@fixture.EventFinalResult</span>
                                            @if (!string.IsNullOrEmpty(fixture.EventGameResult))
                                            {
                                                <br><small class="text-muted">@fixture.EventGameResult</small>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (fixture.EventLive == "1")
                                        {
                                            <span class="badge bg-danger">
                                                <i class="fas fa-circle text-white" style="animation: pulse 1.5s infinite;"></i>
                                                LIVE
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-3">
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-muted">Total Fixtures: @Model.Count</small>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                Live: @Model.Count(f => f.EventLive == "1") | 
                                Finished: @Model.Count(f => f.EventStatus?.ToLower() == "finished")
                            </small>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <h4 class="alert-heading">No Fixtures Found!</h4>
                    <p>There are currently no fixtures available for the selected date range.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .badge {
        font-size: 0.75em;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log('Fixtures page loaded');
            
            // Add click functionality for live matches
            $('.badge.bg-danger').click(function() {
                alert('This match is currently live!');
            });
        });
    </script>
}
